<%- include("partials/header.ejs") %>

<body>

  <header class="top-header">
    <nav class="sidebar">
      <div class="sidebar-header">
        <i class="ri-arrow-left-line sidebar-close"></i>
      </div>
      <ul class="sidebar-nav">
        <li><a href="/homePage">Home</a></li>
        <li><a href="/inventaris">Inventaris</a></li>
        <li><a href="/shop">Winkel</a></li>
        <li><a href="/friendslist">Vriendenlijst</a></li>
        <li><a href="/settings">Instellingen</a></li>
      </ul>
      <div class="sidebar-bottom">
        <div class="user-circle"></div>
        <span><%= session.username %></span>
        <span><a href="/logout">Uitloggen</a></span>
      </div>
    </nav>
    <div class="overlay"></div>
    <i class="ri-menu-line"></i>
    <h1 class="logo"><a href="/homePage">ICONS</a></h1>
    <div class="nav-items-right">
      <div class="mode-toggle-right">
        <label class="switch">
          <input type="checkbox" id="modeSwitch">
          <span class="slider round">
            <i class="ri-sun-line sun-icon"></i>
            <i class="ri-moon-line moon-icon"></i>
          </span>
        </label>
      </div>
      <div class="search-container">
        <i class="ri-search-2-line" id="search-icon"></i>
        <input type="text" class="search-input" placeholder="Zoeken...">
      </div>
      <img id="profileAvatarHeader" class="user profile__avatar" src="/assets/images/default-avatar.png" />



      <div class="account-card">
        <ul class="list">
          <li class="element">
            <a href="/profile" class="label"><i class="ri-account-box-2-fill"></i>Profiel</a>
          </li>
          <li class="element">
            <a href="/settings" class="label"><i class="ri-settings-5-fill"></i>Instellingen</a>
          </li>
          <div class="separator"></div>
          <li class="element">
            <a href="/logout" class="label"><i class="ri-logout-box-r-fill"></i>Uitloggen</a>
          </li>
        </ul>
      </div>
    </div>
  </header>
  <main class="profile">
    <section class="profile__header">
      <div class="profile__avatar-container">
        <img id="profileAvatar" src="/assets/images/default-avatar.png" alt="User Avatar" class="profile__avatar" />

        <form id="avatarForm" enctype="multipart/form-data" style="display: none;">
          <input type="file" name="avatar" id="avatarInput" accept="image/*" />
        </form>

        <button class="profile__edit-button" title="Edit Profile" onclick="document.getElementById('avatarInput').click();">
          <i class="ri-edit-fill"></i>
        </button>
      </div>
      <div class="profile__info">
        <h1 id="profileUsername" class="profile__username">Loading...</h1>
        <p id="profileLevel" class="profile__level">Level --</p>
        <p id="profileDescription" class="profile__description">Loading description...</p>
        <button id="addFriendBtn" class="profile__add-friend-button">
          <i class="ri-user-add-line"></i> Add Friend
        </button>
      </div>
    </section>

    <section class="profile__body">
      <div class="profile__inventory">
        <h2 class="profile__section-title">Inventory</h2>
        <div id="inventoryGrid" class="profile__inventory-grid">
        </div>
      </div>

      <div class="profile__stats">
        <h2 class="profile__section-title">Stats</h2>
        <ul id="profileStatsList" class="profile__stats-list">
        </ul>
      </div>

      <div class="profile__achievements">
        <h2 class="profile__section-title">Achievements</h2>
        <ul id="achievementsList" class="profile__achievements-list">
        </ul>
      </div>
    </section>
  </main>
  <script>
    const userId = "<%= userId %>";
    const loggedInUserId = "<%= session.userId %>";
    const profileUserId = "<%= userId %>";

    document.addEventListener('DOMContentLoaded', () => {
      loadProfile();

      if (loggedInUserId !== profileUserId) {
        const editBtn = document.querySelector('.profile__edit-button');
        const avatarForm = document.getElementById('avatarForm');

        if (editBtn) editBtn.style.display = 'none';
        if (avatarForm) avatarForm.style.display = 'none';
      }
    });

    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const res = await fetch(`/api/profile/id/${loggedInUserId}`);
        const user = await res.json();
        const avatarUrl = user.avatarUrl || '/assets/images/default-avatar.png';

        document.getElementById('profileAvatarHeader').src = avatarUrl;
      } catch (err) {
        console.error('Failed to load avatar for header:', err);
      }
    });


    async function loadProfile() {
      try {
        const res = await fetch(`/api/profile/id/${userId}`);
        const user = await res.json();
        const avatarUrl = user.avatarUrl || '/assets/images/default-avatar.png';

        document.getElementById('profileUsername').textContent = user.username;
        document.getElementById('profileLevel').textContent = `Level ${user.level || 1}`;
        document.getElementById('profileDescription').textContent = user.description || 'No description yet.';

        document.querySelectorAll('.profile__avatar:not(#profileAvatarHeader)').forEach(img => {
          img.src = avatarUrl;
        });

        const inventoryGrid = document.getElementById('inventoryGrid');
        inventoryGrid.innerHTML = "";

        const totalSlots = 12;
        const items = user.inventory || [];

        for (let i = 0; i < totalSlots; i++) {
          const div = document.createElement('div');
          div.className = 'profile__inventory-item';

          if (items[i]?.item) {
            const item = items[i].item;
            div.title = item.description || item.name;
            div.innerHTML = `<img src="${item.iconUrl}" alt="${item.name}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;" />`;
            div.style.border = 'none';
          }

          inventoryGrid.appendChild(div);
        }

        const statsList = document.getElementById('profileStatsList');
        statsList.innerHTML = '';
        const stats = user.stats || {
          highScore: 0,
          totalScore: 0,
          gamesPlayed: 0
        };
        const statLabels = {
          highScore: 'High Score',
          totalScore: 'Total Score',
          gamesPlayed: 'Games Played'
        };

        for (const key in stats) {
          const li = document.createElement('li');
          li.className = 'profile__stat';
          li.innerHTML = `<span class="profile__stat-label">${statLabels[key] || key}:</span> ${stats[key]}`;
          statsList.appendChild(li);
        }

        const achievementsList = document.getElementById('achievementsList');
        achievementsList.innerHTML = '';
        (user.achievements || []).forEach(ach => {
          const li = document.createElement('li');
          li.className = 'profile__achievement';
          li.title = ach.description || ach.name;
          li.innerHTML = `<img src="${ach.iconUrl}" alt="${ach.name}" class="achievement-image" />`;
          achievementsList.appendChild(li);
        });

      } catch (err) {
        console.error('Failed to load profile:', err);
      }
    }

    document.getElementById('avatarInput').addEventListener('change', async (e) => {
      const file = e.target.files[0];
      if (!file) return;

      const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('Selecteer a.u.b een afbeelding met een toegelaten formaat. (PNG, JPG, JPEG, WEBP).\nGIFs, videos, documenten en andere bestanden zijn niet toegelaten.');
        e.target.value = '';
        return;
      }

      const formData = new FormData();
      formData.append('avatar', file);

      try {
        const res = await fetch(`/api/profile/id/${userId}/avatar`, {
          method: 'POST',
          body: formData
        });

        if (!res.ok) throw new Error('Upload failed');
        const data = await res.json();

        document.querySelectorAll('.profile__avatar-container img.profile__avatar, #profileAvatar').forEach(img => {
          img.src = data.avatarUrl + '?t=' + new Date().getTime();
        });
      } catch (err) {
        console.error('Avatar upload error:', err);
        alert('Upload mislukt.');
      }
    });
  </script>

</body>

</html>
<%- include("Partials/footer.ejs") %>