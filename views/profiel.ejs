<%- include("partials/header.ejs") %>

<body>

  <header class="top-header">
    <nav class="sidebar">
      <div class="sidebar-header">
        <i class="ri-arrow-left-line sidebar-close"></i>
      </div>
      <ul class="sidebar-nav">
        <li><a href="/home">Home</a></li>
        <li><a href="/shop">Winkel</a></li>
        <li><a href="/friendslist">Vriendenlijst</a></li>
        <li><a href="/settings">Instellingen</a></li>
      </ul>
      <div class="sidebar-bottom">
        <div class="user-circle">
          <img class="user profileAvatarHeader" src="/assets/images/default-avatar.png" />
        </div>
        <span><%= session.username %></span>
        <span><a href="/logout">Uitloggen</a></span>
      </div>
    </nav>
    <div class="overlay"></div>
    <i class="ri-menu-line"></i>
    <h1 class="logo"><a href="/home">ICONS</a></h1>
    <div class="nav-items-right">
      <div class="mode-toggle-right">
        <label class="switch">
          <input type="checkbox" id="modeSwitch">
          <span class="slider round">
            <i class="ri-sun-line sun-icon"></i>
            <i class="ri-moon-line moon-icon"></i>
          </span>
        </label>
      </div>
      <img class="user profile__avatar profileAvatarHeader header-user-avatar" src="/assets/images/default-avatar.png" />
      <div class="account-card">
        <ul class="list">
          <li class="element">
            <a href="/profile" class="label"><i class="ri-account-box-2-fill"></i>Profiel</a>
          </li>
          <li class="element">
            <a href="/settings" class="label"><i class="ri-settings-5-fill"></i>Instellingen</a>
          </li>
          <div class="separator"></div>
          <li class="element">
            <a href="/logout" class="label"><i class="ri-logout-box-r-fill"></i>Uitloggen</a>
          </li>
        </ul>
      </div>
    </div>
  </header>
  <main class="profile">
    <section class="profile__header">
      <div class="profile__avatar-container">
        <img id="profileAvatar" src="/assets/images/default-avatar.png" alt="User Avatar" class="profile__avatar" />

        <form id="avatarForm" enctype="multipart/form-data" style="display: none;">
          <input type="file" name="avatar" id="avatarInput" accept="image/*" />
        </form>

        <button class="profile__edit-button" title="Edit Profile" onclick="document.getElementById('avatarInput').click();">
          <i class="ri-edit-fill"></i>
        </button>
      </div>
      <div class="profile__info">
        <h1 id="profileUsername" class="profile__username">Laden...</h1>
      </div>
    </section>

    <section class="profile__body">
      <div class="profile__inventory">
        <h2 class="profile__section-title">Inventory</h2>

        <div class="profile__inventory-tabs">
          <button class="inventory-tab active" data-tab="inventory">Inventory</button>
          <button class="inventory-tab" data-tab="banned">Blacklist</button>
          <button class="inventory-tab" data-tab="favorites">Favorieten</button>
        </div>

        <div id="inventoryGrid" class="profile__inventory-grid inventory-tab-content active" data-tab-content="inventory"></div>
        <div id="bannedGrid" class="profile__inventory-grid inventory-tab-content" data-tab-content="banned"></div>
        <div id="favoritesGrid" class="profile__inventory-grid inventory-tab-content" data-tab-content="favorites"></div>
      </div>
    </section>
    <div id="blockModal" class="modal hidden">
      <div class="modal-content">
        <h2 id="modalTitle">Blacklist karakter</h2>
        <label for="banReason">Reden van blacklist:</label>
        <input type="text" id="banReason" placeholder="Schrijf hier uw reden..." />

        <div class="modal-actions">
          <button id="confirmBlockBtn">Blacklist</button>
          <button id="updateReasonBtn" class="btn hidden">Update reden</button>
          <button id="confirmUnblockBtn" class="hidden">Unblacklist</button>
          <button id="cancelBlockBtn">Annuleer</button>
        </div>
      </div>
    </div>
  </main>
  <script>
    const userId = "<%= userId %>";
    const loggedInUserId = "<%= session.userId %>";
    const profileUserId = "<%= userId %>";
    let fullBannedItems = [];
    let favoriteIds = new Set();
    let blockedIds = new Set();
    let fullInventory = [];
    const inventoryGrid = document.getElementById('inventoryGrid');
    const bannedGrid = document.getElementById('bannedGrid');
    const favoritesGrid = document.getElementById('favoritesGrid');

    document.addEventListener('DOMContentLoaded', () => {
      loadProfile();

      if (loggedInUserId !== profileUserId) {
        const editBtn = document.querySelector('.profile__edit-button');
        const avatarForm = document.getElementById('avatarForm');

        if (editBtn) editBtn.style.display = 'none';
        if (avatarForm) avatarForm.style.display = 'none';
      }
    });

    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const res = await fetch(`/api/profile/id/${loggedInUserId}`);
        const user = await res.json();
        const avatarUrl = user.avatarUrl || '/assets/images/default-avatar.png';

        document.querySelectorAll('.profileAvatarHeader').forEach(img => {
          img.src = avatarUrl;
        });
      } catch (err) {
        console.error('Failed to load avatar for header:', err);
      }

      document.querySelectorAll('.inventory-tab').forEach(button => {
        button.addEventListener('click', () => {
          document.querySelectorAll('.inventory-tab').forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');

          const target = button.getAttribute('data-tab');
          document.querySelectorAll('.inventory-tab-content').forEach(grid => {
            if (grid.getAttribute('data-tab-content') === target) {
              grid.classList.add('active');
            } else {
              grid.classList.remove('active');
            }
          });
        });
      });
    });

    function showBlockModal(itemId) {
      const modal = document.getElementById('blockModal');
      const reasonInput = document.getElementById('banReason');
      const confirmBtn = document.getElementById('confirmBlockBtn');
      const unblockBtn = document.getElementById('confirmUnblockBtn');
      const updateReasonBtn = document.getElementById('updateReasonBtn');
      const cancelBtn = document.getElementById('cancelBlockBtn');

      const isBlocked = blockedIds.has(itemId);
      const bannedItem = fullBannedItems.find(i => i.id === itemId);
      const existingBan = bannedItem?.reason || '';

      reasonInput.value = isBlocked ? existingBan : '';
      document.getElementById('modalTitle').textContent = isBlocked ? 'Blacklisten opties' : 'Blacklisten';

      confirmBtn.classList.toggle('hidden', isBlocked);
      unblockBtn.classList.toggle('hidden', !isBlocked);
      updateReasonBtn.classList.toggle('hidden', !isBlocked);

      modal.classList.remove('hidden');

      cancelBtn.onclick = () => modal.classList.add('hidden');

      confirmBtn.onclick = async () => {
        blockedIds.add(itemId);
        favoriteIds.delete(itemId);
        await savePreferences(reasonInput.value, itemId);
        modal.classList.add('hidden');
        refreshGrids();
      };

      unblockBtn.onclick = async () => {
        blockedIds.delete(itemId);
        await savePreferences('', itemId);
        modal.classList.add('hidden');
        refreshGrids();
      };

      updateReasonBtn.onclick = async () => {
        await savePreferences(reasonInput.value, itemId);

        const existing = fullBannedItems.find(i => i.id === itemId);
        if (existing) {
          existing.reason = reasonInput.value;
        }
        modal.classList.add('hidden');
        refreshGrids();
      };
    }

    async function savePreferences(reason = '', singleItemId = null) {
      const bannedWithReasons = Array.from(blockedIds).map(id => ({
        itemId: id,
        reason: id === singleItemId ? reason : (fullBannedItems.find(i => i.id === id)?.reason || ''),
      }));

      try {
        const res = await fetch(`/api/profile/id/${userId}/inventory-updates`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            favoriteIds: Array.from(favoriteIds),
            bannedItems: bannedWithReasons
          })
        });

        if (!res.ok) {
          console.error('Failed to save preferences');
          return;
        }
        const updatedRes = await fetch(`/api/profile/id/${userId}`);
        const updatedUser = await updatedRes.json();
        fullBannedItems = updatedUser.fullBannedItems || [];

      } catch (err) {
        console.error('Error saving preferences:', err);
      }
    }

    function refreshGrids() {
      const favItems = fullInventory.filter(i => favoriteIds.has(i.id));
      const blockedItems = fullInventory.filter(i => blockedIds.has(i.id));

      inventoryGrid.innerHTML = "";
      favoritesGrid.innerHTML = "";
      bannedGrid.innerHTML = "";

      renderInventoryItems(inventoryGrid, fullInventory);
      renderFavoriteItems(favoritesGrid, favItems);
      renderBannedItems(bannedGrid, blockedItems);
    }

    function renderInventoryItems(grid, items, totalSlots = 12) {
      for (let i = 0; i < totalSlots; i++) {
        const div = document.createElement('div');
        div.className = 'profile__inventory-item';

        if (items[i]) {
          const item = items[i];
          div.title = item.description || item.name || 'No description';

          const imgSrc = item.images?.icon || item.images?.smallIcon;

          if (imgSrc) {
            div.innerHTML = `<img src="${imgSrc}" alt="${item.name || 'Item'}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;" />`;
          } else {
            div.textContent = item.name || 'Unknown Item';
          }

          if (blockedIds.has(item.id)) {
            div.style.filter = 'grayscale(100%)';
            div.style.opacity = '0.6';
          } else {
            div.style.filter = 'none';
            div.style.opacity = '1';
          }

          if (favoriteIds.has(item.id)) {
            div.classList.add('fav-slot');
          }

          const buttons = createActionButtons(item.id);
          div.appendChild(buttons);

          div.style.position = 'relative';
          div.style.border = 'none';
        }

        grid.appendChild(div);
      }
    }

    function renderFavoriteItems(grid, items, totalSlots = 12) {
      for (let i = 0; i < totalSlots; i++) {
        const div = document.createElement('div');
        div.className = 'profile__inventory-item';

        if (items[i]) {
          const item = items[i];
          div.title = item.description || item.name || 'No description';

          const imgSrc = item.images?.icon || item.images?.smallIcon;

          if (imgSrc) {
            div.innerHTML = `<img src="${imgSrc}" alt="${item.name || 'Item'}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;" />`;
          } else {
            div.textContent = item.name || 'Unknown Item';
          }

          div.style.filter = 'none';
          div.style.opacity = '1';

          const buttons = createActionButtons(item.id);
          div.appendChild(buttons);

          div.style.border = 'none';
        }

        grid.appendChild(div);
      }
    }

    function renderBannedItems(grid, items, totalSlots = 12) {
      for (let i = 0; i < totalSlots; i++) {
        const div = document.createElement('div');
        div.className = 'profile__inventory-item';

        if (items[i]) {
          const item = items[i];
          div.title = item.description || item.name || 'No description';

          const imgSrc = item.images?.icon || item.images?.smallIcon;

          if (imgSrc) {
            div.innerHTML = `<img src="${imgSrc}" alt="${item.name || 'Item'}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;" />`;
          } else {
            div.textContent = item.name || 'Unknown Item';
          }

          div.style.filter = 'none';
          div.style.opacity = '1';

          const buttons = createActionButtons(item.id);
          div.appendChild(buttons);

          div.style.border = 'none';
        }

        grid.appendChild(div);
      }
    }

    function createActionButtons(itemId) {
      if (loggedInUserId !== profileUserId) return document.createElement('div');

      const container = document.createElement('div');
      container.className = 'item-actions';

      const favBtn = document.createElement('button');
      favBtn.classList.add('fav-btn');
      favBtn.title = favoriteIds.has(itemId) ? 'Unfavorite' : 'Favorite';
      if (favoriteIds.has(itemId)) favBtn.classList.add('fav-active');
      favBtn.innerHTML = `<i class="ri-star-line"></i><i class="ri-star-fill"></i>`;
      favBtn.addEventListener('click', () => {
        if (favoriteIds.has(itemId)) {
          favoriteIds.delete(itemId);
        } else {
          favoriteIds.add(itemId);
          blockedIds.delete(itemId);
        }
        refreshGrids();
        savePreferences();
      });
      container.appendChild(favBtn);

      const blockBtn = document.createElement('button');
      blockBtn.classList.add('block-btn');
      blockBtn.title = blockedIds.has(itemId) ? 'Unblock' : 'Block';
      if (blockedIds.has(itemId)) blockBtn.classList.add('block-active');
      blockBtn.innerHTML = `<i class="ri-spam-3-line"></i><i class="ri-spam-3-fill"></i>`;
      blockBtn.addEventListener('click', () => {
        showBlockModal(itemId);
      });
      container.appendChild(blockBtn);

      return container;
    }

    async function loadProfile() {
      try {
        const res = await fetch(`/api/profile/id/${userId}`);
        const user = await res.json();
        const avatarUrl = user.avatarUrl || '/assets/images/default-avatar.png';

        document.getElementById('profileUsername').textContent = user.username;
        document.querySelectorAll('.profile__avatar:not(#profileAvatarHeader)').forEach(img => {
          img.src = avatarUrl;
        });

        fullInventory = user.fullInventory || [];
        favoriteIds = new Set((user.fullFavoriteItems || []).map(i => i.id));
        blockedIds = new Set((user.fullBannedItems || []).map(i => i.id));
        fullBannedItems = user.fullBannedItems || [];



        inventoryGrid.innerHTML = "";
        bannedGrid.innerHTML = "";
        favoritesGrid.innerHTML = "";

        refreshGrids();

      } catch (err) {
        console.error('Failed to load profile:', err);
      }
    }


    document.getElementById('avatarInput').addEventListener('change', async (e) => {
      const file = e.target.files[0];
      if (!file) return;

      const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('Selecteer a.u.b een afbeelding met een toegelaten formaat. (PNG, JPG, JPEG, WEBP).\nGIFs, videos, documenten en andere bestanden zijn niet toegelaten.');
        e.target.value = '';
        return;
      }

      const formData = new FormData();
      formData.append('avatar', file);

      try {
        const res = await fetch(`/api/profile/id/${userId}/avatar`, {
          method: 'POST',
          body: formData
        });

        if (!res.ok) throw new Error('Upload failed');
        const data = await res.json();

        document.querySelectorAll('.profile__avatar-container img.profile__avatar, #profileAvatar').forEach(img => {
          img.src = data.avatarUrl + '?t=' + new Date().getTime();
        });
      } catch (err) {
        console.error('Avatar upload error:', err);
        alert('Upload mislukt.');
      }
    });
  </script>
</body>

</html>
<%- include("partials/footer.ejs") %>